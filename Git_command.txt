Git command
------------

Створення Git-репозиторію
--------------------------
1. Перейти в каталог з якого потрібно зробити Git репозиторій та виконати команду

git init

2. Для отримання копії існуючого Git-репозиторія, необхідно використовувати команду 

git clone <url>
git clone https://github.com/libgit2/libgit2

Видалення локального Git-репозиторію
------------------------------------
rm -rf .git
rm -rf .git*

Кешування облікових даних
---------------------------
git config --global credential.helper cache

Додавання файлів в область підготовлених файлів
-----------------------------------------------
git add somefile.js
git add .		//додати всі файли і папки

Перевірка статусу репозиторію
------------------------------
git status

Внесення змін однорядковим повідомленням або через редактор
------------------------------------------------------------
git commit -m "Your short summary about the commit"

Перегляд історії комітів зі змінами
------------------------------------
git log -p

Перегляд заданого коміту
-------------------------
git show 1af17e73721dbe0c40011b82ed4bbb1a7dbe3ce29
git show 1af17e						//скорочений хеш

Перегляд змін до комміту
-------------------------
git diff

Для перегляду підготовлених змін необхідно додати прапор --staged.
git diff --staged

Також можна вказати ім'я файлу як параметр і переглянути зміни, внесені тільки в цей файл.
git diff somefile.js

Видалення відстежуваних файлів із поточного робочого дерева
------------------------------------------------------------
git rm dirname/somefile.js
git rm dirname/*.html

Перейменування файлів
------------------------
Перейменувати файл або теку можна параметром mv.
Для нього вказується джерело source і призначення destination. 
Джерело - реально наявний файл або тека, а призначення - наявна тека.

git mv dir1/somefile.js dir2

Скасування підготовлених і непідготовлених змін
------------------------------------------------
git checkout somefile.js	//Відновити файл робочого дерева, не підготовлений до коміту
git reset HEAD somefile.js	//Відновити підготовлений файл робочого дерева, файл перейде в категорію не підготовлених до коміту(без змін)
git reset HEAD			//Виконати цю дію для всіх підготовлених файлів

Зміна останнього коміту
-------------------------
git commit --amend -m "Updated message for the previous commit"

Відкат останнього коміту
-------------------------
git revert HEAD

Відкат заданого коміту
-------------------------
git revert 1af17e	//відкотити коміт до заданого

Створення нової гілки
----------------------
git branch
git branch testing 	//створити нову гілку testing(лише створюється новий покажчик для подальшого переміщення) 

Команда git branch тільки створює нову гілку, але не перемикає на неї.

git log --oneline --decorate //подивитися куди вказують покажчики гілок

Перемикання на наявну гілку
----------------------------
git checkout
git checkout testing

git log --all  //подивитися історію комітів за всіма гілками (можна вказати конкретну гілку git log testing)
git log --oneline --decorate --graph --all

Перемикання гілок змінює файли в робочому каталозі
Важливо запам'ятати, що при перемиканні гілок у Git відбувається зміна файлів у робочому каталозі.

Одночасне створення нової гілки і перемикання на неї
-----------------------------------------------------
git checkout -b <newbranchname>

Починаючи з Git версії 2.23, можна використовувати git switch замість git checkout, щоб:
	переключитися на наявну гілку: git switch testing-branch.
	
	створити нову гілку і переключитися на неї: git switch -c new-branch. 
	Прапор -c означає створення, але також можна використовувати повний формат:` --create`.

	повернутися до попередньої витягнутої гілки: git switch -.

git branch	//показати список гілок
git branch -a 	//показати список видалених гілок

Видалення гілки
----------------
git branch -d existing_branch_name
git branch -D existing_branch_name		//примусове видалення незалежно від поточного статусу, без попередженнь
git push origin --delete existing_branch_name	//видалення гілки у віддаленому репозиторії

Злиття двох гілок
------------------
git merge existing_branch_name		//обєднає зазначену гілку з основною
git merge --no-ff existing_branch_name	//Якщо треба виконати коміт злиття. Це необхідно для фіксації всіх злиттів у вашому репозиторії.

Відображення журналу фіксації у вигляді графіка для поточної або всіх гілок
----------------------------------------------------------------------------
git log --graph --oneline --decorate
git log --all --graph --oneline --decorate

Припинення злиття в разі конфлікту
-----------------------------------
git merge --abort

Також у разі конфлікту злиття можна використовувати параметр reset, 
щоб відновити конфліктні файли до стабільного стану.
git reset

Додавання віддаленого репозиторію
----------------------------------
Додати віддалений репозиторій можна параметром remote add, 
вказавши shortname і url потрібного репозиторію.

git remote add awesomeapp https://github.com/someurl...

Перегляд віддалених URL-адрес
------------------------------
git remote -v	//відображає віддалені підключення до інших репозиторіїв

Отримання додаткових відомостей про віддалене сховище
------------------------------------------------------
git remote show origin

Надсилання змін у віддалений репозиторій
-----------------------------------------
Відправляти зміни у віддалений репозиторій можна параметром push 
із зазначенням імені репозиторію та гілки.

git push origin main

Отримання змін із віддаленого сховища
--------------------------------------
git pull
git pull --verbose	//переглянути докладні відомості про завантажені файли

Злиття віддаленого репозиторію з локальним
--------------------------------------------
Злиття віддаленого репозиторію з локальним виконується параметром merge 
із зазначенням імені віддаленого репозиторію.

git merge origin

Надсилання нової гілки у віддалений репозиторій
------------------------------------------------
Передати нову гілку у віддалений репозиторій можна параметром push із прапором -u, 
вказавши ім'я репозиторію та ім'я гілки.

git push -u origin new_branch

Видалення видаленої гілки
------------------------------
Щоб позбутися видаленої гілки, використовуйте параметр push із прапором --delete, 
вказавши ім'я віддаленого сховища та ім'я гілки.

git push --delete origin existing_branch

Використання перебазування
---------------------------
Для доступу до цієї функції використовуйте параметр rebase із зазначенням імені гілки. 
Перебазування - це процес об'єднання або переміщення послідовності комітів на новий батьківський знімок.

git rebase branch_name

Створення тега
---------------
git tag <tagname>
git tag -a v1.4    //анотований тег
git tag -a v1.4 -m "my version 1.4"

git tag  //переглянути список збережених тегів

За замовчуванням команда git tag створює тег для коміта, на який посилається покажчик HEAD
Щоб оновити тег, потрібно використувувати параметр -f
git tag -a -f v1.4 15027957951b64cf874c3557a0f3547bd83b3ff6

За замовчуванням команда git push не надсилає теги. 
Їх необхідно вказати в команді git push явним чином
git push origin v1.4

Для одночасного надсилання одразу кількох тегів 
необхідно вказати в команді git push параметр --tags

Щоб видалити певний тег, передайте команді git tag параметр -d та ідентифікатор цього тега
git tag -d v1
---------------------------------------------------------------------------------------------------------------------------------------------------



